/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface StreamRegistryV3Interface extends ethers.utils.Interface {
    functions: {
        'DEFAULT_ADMIN_ROLE()': FunctionFragment
        'ENScreateStreamCallback(address,string,string,string)': FunctionFragment
        'MAX_INT()': FunctionFragment
        'TRUSTED_ROLE()': FunctionFragment
        'addressToString(address)': FunctionFragment
        'createStream(string,string)': FunctionFragment
        'createStreamWithENS(string,string,string)': FunctionFragment
        'deleteStream(string)': FunctionFragment
        'exists(string)': FunctionFragment
        'getAddressKey(string,address)': FunctionFragment
        'getDirectPermissionsForUser(string,address)': FunctionFragment
        'getPermissionsForUser(string,address)': FunctionFragment
        'getRoleAdmin(bytes32)': FunctionFragment
        'getStreamMetadata(string)': FunctionFragment
        'getTrustedRole()': FunctionFragment
        'grantPermission(string,address,uint8)': FunctionFragment
        'grantPublicPermission(string,uint8)': FunctionFragment
        'grantRole(bytes32,address)': FunctionFragment
        'hasDirectPermission(string,address,uint8)': FunctionFragment
        'hasPermission(string,address,uint8)': FunctionFragment
        'hasPublicPermission(string,uint8)': FunctionFragment
        'hasRole(bytes32,address)': FunctionFragment
        'initialize(address,address)': FunctionFragment
        'isTrustedForwarder(address)': FunctionFragment
        'renounceRole(bytes32,address)': FunctionFragment
        'revokeAllPermissionsForUser(string,address)': FunctionFragment
        'revokePermission(string,address,uint8)': FunctionFragment
        'revokePublicPermission(string,uint8)': FunctionFragment
        'revokeRole(bytes32,address)': FunctionFragment
        'setEnsCache(address)': FunctionFragment
        'setExpirationTime(string,address,uint8,uint256)': FunctionFragment
        'setPermissions(string,address[],tuple[])': FunctionFragment
        'setPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)': FunctionFragment
        'setPermissionsMultipleStreans(string[],address[][],tuple[][])': FunctionFragment
        'setPublicPermission(string,uint256,uint256)': FunctionFragment
        'streamIdToMetadata(string)': FunctionFragment
        'streamIdToPermissions(string,bytes32)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'transferAllPermissionsToUser(string,address)': FunctionFragment
        'transferPermissionToUser(string,address,uint8)': FunctionFragment
        'trustedCreateStreams(string[],string[])': FunctionFragment
        'trustedSetPermissions(string[],address[],tuple[])': FunctionFragment
        'trustedSetPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)': FunctionFragment
        'trustedSetStreamMetadata(string,string)': FunctionFragment
        'trustedSetStreamWithPermission(string,string,address,bool,bool,uint256,uint256,bool)': FunctionFragment
        'trustedSetStreams(string[],address[],string[],tuple[])': FunctionFragment
        'updateStreamMetadata(string,string)': FunctionFragment
        'upgradeTo(address)': FunctionFragment
        'upgradeToAndCall(address,bytes)': FunctionFragment
    }

    encodeFunctionData(
        functionFragment: 'DEFAULT_ADMIN_ROLE',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'ENScreateStreamCallback',
        values: [string, string, string, string]
    ): string
    encodeFunctionData(functionFragment: 'MAX_INT', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'TRUSTED_ROLE',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'addressToString',
        values: [string]
    ): string
    encodeFunctionData(
        functionFragment: 'createStream',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'createStreamWithENS',
        values: [string, string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'deleteStream',
        values: [string]
    ): string
    encodeFunctionData(functionFragment: 'exists', values: [string]): string
    encodeFunctionData(
        functionFragment: 'getAddressKey',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'getDirectPermissionsForUser',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'getPermissionsForUser',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'getRoleAdmin',
        values: [BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'getStreamMetadata',
        values: [string]
    ): string
    encodeFunctionData(
        functionFragment: 'getTrustedRole',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'grantPermission',
        values: [string, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'grantPublicPermission',
        values: [string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'grantRole',
        values: [BytesLike, string]
    ): string
    encodeFunctionData(
        functionFragment: 'hasDirectPermission',
        values: [string, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'hasPermission',
        values: [string, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'hasPublicPermission',
        values: [string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'hasRole',
        values: [BytesLike, string]
    ): string
    encodeFunctionData(
        functionFragment: 'initialize',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'isTrustedForwarder',
        values: [string]
    ): string
    encodeFunctionData(
        functionFragment: 'renounceRole',
        values: [BytesLike, string]
    ): string
    encodeFunctionData(
        functionFragment: 'revokeAllPermissionsForUser',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'revokePermission',
        values: [string, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'revokePublicPermission',
        values: [string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'revokeRole',
        values: [BytesLike, string]
    ): string
    encodeFunctionData(
        functionFragment: 'setEnsCache',
        values: [string]
    ): string
    encodeFunctionData(
        functionFragment: 'setExpirationTime',
        values: [string, string, BigNumberish, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'setPermissions',
        values: [
            string,
            string[],
            {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setPermissionsForUser',
        values: [
            string,
            string,
            boolean,
            boolean,
            BigNumberish,
            BigNumberish,
            boolean
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setPermissionsMultipleStreans',
        values: [
            string[],
            string[][],
            {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setPublicPermission',
        values: [string, BigNumberish, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'streamIdToMetadata',
        values: [string]
    ): string
    encodeFunctionData(
        functionFragment: 'streamIdToPermissions',
        values: [string, BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'supportsInterface',
        values: [BytesLike]
    ): string
    encodeFunctionData(
        functionFragment: 'transferAllPermissionsToUser',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'transferPermissionToUser',
        values: [string, string, BigNumberish]
    ): string
    encodeFunctionData(
        functionFragment: 'trustedCreateStreams',
        values: [string[], string[]]
    ): string
    encodeFunctionData(
        functionFragment: 'trustedSetPermissions',
        values: [
            string[],
            string[],
            {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'trustedSetPermissionsForUser',
        values: [
            string,
            string,
            boolean,
            boolean,
            BigNumberish,
            BigNumberish,
            boolean
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'trustedSetStreamMetadata',
        values: [string, string]
    ): string
    encodeFunctionData(
        functionFragment: 'trustedSetStreamWithPermission',
        values: [
            string,
            string,
            string,
            boolean,
            boolean,
            BigNumberish,
            BigNumberish,
            boolean
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'trustedSetStreams',
        values: [
            string[],
            string[],
            string[],
            {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'updateStreamMetadata',
        values: [string, string]
    ): string
    encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string
    encodeFunctionData(
        functionFragment: 'upgradeToAndCall',
        values: [string, BytesLike]
    ): string

    decodeFunctionResult(
        functionFragment: 'DEFAULT_ADMIN_ROLE',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'ENScreateStreamCallback',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'MAX_INT', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'TRUSTED_ROLE',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'addressToString',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'createStream',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'createStreamWithENS',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'deleteStream',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'getAddressKey',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getDirectPermissionsForUser',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getPermissionsForUser',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getRoleAdmin',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getStreamMetadata',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getTrustedRole',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'grantPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'grantPublicPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'hasDirectPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hasPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'hasPublicPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'initialize',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'isTrustedForwarder',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'renounceRole',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'revokeAllPermissionsForUser',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'revokePermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'revokePublicPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'revokeRole',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'setEnsCache',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'setExpirationTime',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'setPermissions',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'setPermissionsForUser',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'setPermissionsMultipleStreans',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'setPublicPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'streamIdToMetadata',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'streamIdToPermissions',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'supportsInterface',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'transferAllPermissionsToUser',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'transferPermissionToUser',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'trustedCreateStreams',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'trustedSetPermissions',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'trustedSetPermissionsForUser',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'trustedSetStreamMetadata',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'trustedSetStreamWithPermission',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'trustedSetStreams',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'updateStreamMetadata',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'upgradeToAndCall',
        data: BytesLike
    ): Result

    events: {
        'AdminChanged(address,address)': EventFragment
        'BeaconUpgraded(address)': EventFragment
        'PermissionUpdated(string,address,bool,bool,uint256,uint256,bool)': EventFragment
        'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
        'RoleGranted(bytes32,address,address)': EventFragment
        'RoleRevoked(bytes32,address,address)': EventFragment
        'StreamCreated(string,string)': EventFragment
        'StreamDeleted(string)': EventFragment
        'StreamUpdated(string,string)': EventFragment
        'Upgraded(address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PermissionUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'StreamCreated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'StreamDeleted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'StreamUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment
}

export class StreamRegistryV3 extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this

    listeners(eventName?: string): Array<Listener>
    off(eventName: string, listener: Listener): this
    on(eventName: string, listener: Listener): this
    once(eventName: string, listener: Listener): this
    removeListener(eventName: string, listener: Listener): this
    removeAllListeners(eventName?: string): this

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

    interface: StreamRegistryV3Interface

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

        'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<[string]>

        ENScreateStreamCallback(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'ENScreateStreamCallback(address,string,string,string)'(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        MAX_INT(overrides?: CallOverrides): Promise<[BigNumber]>

        'MAX_INT()'(overrides?: CallOverrides): Promise<[BigNumber]>

        TRUSTED_ROLE(overrides?: CallOverrides): Promise<[string]>

        'TRUSTED_ROLE()'(overrides?: CallOverrides): Promise<[string]>

        addressToString(
            _address: string,
            overrides?: CallOverrides
        ): Promise<[string]>

        'addressToString(address)'(
            _address: string,
            overrides?: CallOverrides
        ): Promise<[string]>

        createStream(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'createStream(string,string)'(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        createStreamWithENS(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'createStreamWithENS(string,string,string)'(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        deleteStream(
            streamId: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'deleteStream(string)'(
            streamId: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        exists(streamId: string, overrides?: CallOverrides): Promise<[boolean]>

        'exists(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        getAddressKey(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<[string]>

        'getAddressKey(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<[string]>

        getDirectPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [
                [boolean, boolean, BigNumber, BigNumber, boolean] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            ] & {
                permission: [
                    boolean,
                    boolean,
                    BigNumber,
                    BigNumber,
                    boolean
                ] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            }
        >

        'getDirectPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [
                [boolean, boolean, BigNumber, BigNumber, boolean] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            ] & {
                permission: [
                    boolean,
                    boolean,
                    BigNumber,
                    BigNumber,
                    boolean
                ] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            }
        >

        getPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [
                [boolean, boolean, BigNumber, BigNumber, boolean] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            ] & {
                permission: [
                    boolean,
                    boolean,
                    BigNumber,
                    BigNumber,
                    boolean
                ] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            }
        >

        'getPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [
                [boolean, boolean, BigNumber, BigNumber, boolean] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            ] & {
                permission: [
                    boolean,
                    boolean,
                    BigNumber,
                    BigNumber,
                    boolean
                ] & {
                    canEdit: boolean
                    canDelete: boolean
                    publishExpiration: BigNumber
                    subscribeExpiration: BigNumber
                    canGrant: boolean
                }
            }
        >

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<[string]>

        'getRoleAdmin(bytes32)'(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<[string]>

        getStreamMetadata(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<[string] & { des: string }>

        'getStreamMetadata(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<[string] & { des: string }>

        getTrustedRole(overrides?: CallOverrides): Promise<[string]>

        'getTrustedRole()'(overrides?: CallOverrides): Promise<[string]>

        grantPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'grantPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        grantPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'grantPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'grantRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        hasDirectPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean] & { userHasPermission: boolean }>

        'hasDirectPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean] & { userHasPermission: boolean }>

        hasPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean] & { userHasPermission: boolean }>

        'hasPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean] & { userHasPermission: boolean }>

        hasPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean] & { userHasPermission: boolean }>

        'hasPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean] & { userHasPermission: boolean }>

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        'hasRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        initialize(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'initialize(address,address)'(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        isTrustedForwarder(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        'isTrustedForwarder(address)'(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'renounceRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        revokeAllPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'revokeAllPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        revokePermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'revokePermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        revokePublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'revokePublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'revokeRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setEnsCache(
            ensCacheAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'setEnsCache(address)'(
            ensCacheAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setExpirationTime(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'setExpirationTime(string,address,uint8,uint256)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setPermissions(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'setPermissions(string,address[],tuple[])'(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'setPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setPermissionsMultipleStreans(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'setPermissionsMultipleStreans(string[],address[][],tuple[][])'(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        setPublicPermission(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'setPublicPermission(string,uint256,uint256)'(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        streamIdToMetadata(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<[string]>

        'streamIdToMetadata(string)'(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<[string]>

        streamIdToPermissions(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        'streamIdToPermissions(string,bytes32)'(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        transferAllPermissionsToUser(
            streamId: string,
            recipient: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'transferAllPermissionsToUser(string,address)'(
            streamId: string,
            recipient: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        transferPermissionToUser(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'transferPermissionToUser(string,address,uint8)'(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        trustedCreateStreams(
            streamIds: string[],
            metadatas: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'trustedCreateStreams(string[],string[])'(
            streamIds: string[],
            metadatas: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        trustedSetPermissions(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'trustedSetPermissions(string[],address[],tuple[])'(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        trustedSetPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'trustedSetPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        trustedSetStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'trustedSetStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        trustedSetStreamWithPermission(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'trustedSetStreamWithPermission(string,string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        trustedSetStreams(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'trustedSetStreams(string[],address[],string[],tuple[])'(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        updateStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'updateStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        upgradeTo(
            newImplementation: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'upgradeTo(address)'(
            newImplementation: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        upgradeToAndCall(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>

        'upgradeToAndCall(address,bytes)'(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>
    }

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>

    ENScreateStreamCallback(
        ownerAddress: string,
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'ENScreateStreamCallback(address,string,string,string)'(
        ownerAddress: string,
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_INT()'(overrides?: CallOverrides): Promise<BigNumber>

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<string>

    'TRUSTED_ROLE()'(overrides?: CallOverrides): Promise<string>

    addressToString(
        _address: string,
        overrides?: CallOverrides
    ): Promise<string>

    'addressToString(address)'(
        _address: string,
        overrides?: CallOverrides
    ): Promise<string>

    createStream(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'createStream(string,string)'(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    createStreamWithENS(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'createStreamWithENS(string,string,string)'(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deleteStream(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'deleteStream(string)'(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    exists(streamId: string, overrides?: CallOverrides): Promise<boolean>

    'exists(string)'(
        streamId: string,
        overrides?: CallOverrides
    ): Promise<boolean>

    getAddressKey(
        streamId: string,
        user: string,
        overrides?: CallOverrides
    ): Promise<string>

    'getAddressKey(string,address)'(
        streamId: string,
        user: string,
        overrides?: CallOverrides
    ): Promise<string>

    getDirectPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
    ): Promise<
        [boolean, boolean, BigNumber, BigNumber, boolean] & {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumber
            subscribeExpiration: BigNumber
            canGrant: boolean
        }
    >

    'getDirectPermissionsForUser(string,address)'(
        streamId: string,
        user: string,
        overrides?: CallOverrides
    ): Promise<
        [boolean, boolean, BigNumber, BigNumber, boolean] & {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumber
            subscribeExpiration: BigNumber
            canGrant: boolean
        }
    >

    getPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
    ): Promise<
        [boolean, boolean, BigNumber, BigNumber, boolean] & {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumber
            subscribeExpiration: BigNumber
            canGrant: boolean
        }
    >

    'getPermissionsForUser(string,address)'(
        streamId: string,
        user: string,
        overrides?: CallOverrides
    ): Promise<
        [boolean, boolean, BigNumber, BigNumber, boolean] & {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumber
            subscribeExpiration: BigNumber
            canGrant: boolean
        }
    >

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    'getRoleAdmin(bytes32)'(
        role: BytesLike,
        overrides?: CallOverrides
    ): Promise<string>

    getStreamMetadata(
        streamId: string,
        overrides?: CallOverrides
    ): Promise<string>

    'getStreamMetadata(string)'(
        streamId: string,
        overrides?: CallOverrides
    ): Promise<string>

    getTrustedRole(overrides?: CallOverrides): Promise<string>

    'getTrustedRole()'(overrides?: CallOverrides): Promise<string>

    grantPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'grantPermission(string,address,uint8)'(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    grantPublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'grantPublicPermission(string,uint8)'(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'grantRole(bytes32,address)'(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hasDirectPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>

    'hasDirectPermission(string,address,uint8)'(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>

    hasPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>

    'hasPermission(string,address,uint8)'(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>

    hasPublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>

    'hasPublicPermission(string,uint8)'(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>

    hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
    ): Promise<boolean>

    'hasRole(bytes32,address)'(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
        ensCacheAddr: string,
        trustedForwarderAddress: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'initialize(address,address)'(
        ensCacheAddr: string,
        trustedForwarderAddress: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isTrustedForwarder(
        forwarder: string,
        overrides?: CallOverrides
    ): Promise<boolean>

    'isTrustedForwarder(address)'(
        forwarder: string,
        overrides?: CallOverrides
    ): Promise<boolean>

    renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'renounceRole(bytes32,address)'(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeAllPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'revokeAllPermissionsForUser(string,address)'(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokePermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'revokePermission(string,address,uint8)'(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokePublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'revokePublicPermission(string,uint8)'(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'revokeRole(bytes32,address)'(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setEnsCache(
        ensCacheAddr: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setEnsCache(address)'(
        ensCacheAddr: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setExpirationTime(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        expirationTime: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setExpirationTime(string,address,uint8,uint256)'(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        expirationTime: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setPermissions(
        streamId: string,
        users: string[],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setPermissions(string,address[],tuple[])'(
        streamId: string,
        users: string[],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setPermissionsForUser(
        streamId: string,
        user: string,
        canEdit: boolean,
        deletePerm: boolean,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        canGrant: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
        streamId: string,
        user: string,
        canEdit: boolean,
        deletePerm: boolean,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        canGrant: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setPermissionsMultipleStreans(
        streamIds: string[],
        users: string[][],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[][],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setPermissionsMultipleStreans(string[],address[][],tuple[][])'(
        streamIds: string[],
        users: string[][],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[][],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setPublicPermission(
        streamId: string,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setPublicPermission(string,uint256,uint256)'(
        streamId: string,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    streamIdToMetadata(arg0: string, overrides?: CallOverrides): Promise<string>

    'streamIdToMetadata(string)'(
        arg0: string,
        overrides?: CallOverrides
    ): Promise<string>

    streamIdToPermissions(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
    ): Promise<
        [boolean, boolean, BigNumber, BigNumber, boolean] & {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumber
            subscribeExpiration: BigNumber
            canGrant: boolean
        }
    >

    'streamIdToPermissions(string,bytes32)'(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
    ): Promise<
        [boolean, boolean, BigNumber, BigNumber, boolean] & {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumber
            subscribeExpiration: BigNumber
            canGrant: boolean
        }
    >

    supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
    ): Promise<boolean>

    'supportsInterface(bytes4)'(
        interfaceId: BytesLike,
        overrides?: CallOverrides
    ): Promise<boolean>

    transferAllPermissionsToUser(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'transferAllPermissionsToUser(string,address)'(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferPermissionToUser(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'transferPermissionToUser(string,address,uint8)'(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    trustedCreateStreams(
        streamIds: string[],
        metadatas: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'trustedCreateStreams(string[],string[])'(
        streamIds: string[],
        metadatas: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    trustedSetPermissions(
        streamids: string[],
        users: string[],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'trustedSetPermissions(string[],address[],tuple[])'(
        streamids: string[],
        users: string[],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    trustedSetPermissionsForUser(
        streamId: string,
        user: string,
        canEdit: boolean,
        deletePerm: boolean,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        canGrant: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'trustedSetPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
        streamId: string,
        user: string,
        canEdit: boolean,
        deletePerm: boolean,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        canGrant: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    trustedSetStreamMetadata(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'trustedSetStreamMetadata(string,string)'(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    trustedSetStreamWithPermission(
        streamId: string,
        metadata: string,
        user: string,
        canEdit: boolean,
        deletePerm: boolean,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        canGrant: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'trustedSetStreamWithPermission(string,string,address,bool,bool,uint256,uint256,bool)'(
        streamId: string,
        metadata: string,
        user: string,
        canEdit: boolean,
        deletePerm: boolean,
        publishExpiration: BigNumberish,
        subscribeExpiration: BigNumberish,
        canGrant: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    trustedSetStreams(
        streamids: string[],
        users: string[],
        metadatas: string[],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'trustedSetStreams(string[],address[],string[],tuple[])'(
        streamids: string[],
        users: string[],
        metadatas: string[],
        permissions: {
            canEdit: boolean
            canDelete: boolean
            publishExpiration: BigNumberish
            subscribeExpiration: BigNumberish
            canGrant: boolean
        }[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateStreamMetadata(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'updateStreamMetadata(string,string)'(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeTo(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'upgradeTo(address)'(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'upgradeToAndCall(address,bytes)'(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

        'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<string>

        ENScreateStreamCallback(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: CallOverrides
        ): Promise<void>

        'ENScreateStreamCallback(address,string,string,string)'(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: CallOverrides
        ): Promise<void>

        MAX_INT(overrides?: CallOverrides): Promise<BigNumber>

        'MAX_INT()'(overrides?: CallOverrides): Promise<BigNumber>

        TRUSTED_ROLE(overrides?: CallOverrides): Promise<string>

        'TRUSTED_ROLE()'(overrides?: CallOverrides): Promise<string>

        addressToString(
            _address: string,
            overrides?: CallOverrides
        ): Promise<string>

        'addressToString(address)'(
            _address: string,
            overrides?: CallOverrides
        ): Promise<string>

        createStream(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: CallOverrides
        ): Promise<void>

        'createStream(string,string)'(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: CallOverrides
        ): Promise<void>

        createStreamWithENS(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: CallOverrides
        ): Promise<void>

        'createStreamWithENS(string,string,string)'(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: CallOverrides
        ): Promise<void>

        deleteStream(streamId: string, overrides?: CallOverrides): Promise<void>

        'deleteStream(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<void>

        exists(streamId: string, overrides?: CallOverrides): Promise<boolean>

        'exists(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<boolean>

        getAddressKey(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<string>

        'getAddressKey(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<string>

        getDirectPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        'getDirectPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        getPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        'getPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>

        'getRoleAdmin(bytes32)'(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>

        getStreamMetadata(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<string>

        'getStreamMetadata(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<string>

        getTrustedRole(overrides?: CallOverrides): Promise<string>

        'getTrustedRole()'(overrides?: CallOverrides): Promise<string>

        grantPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'grantPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        grantPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'grantPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>

        'grantRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>

        hasDirectPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        'hasDirectPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        hasPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        'hasPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        hasPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        'hasPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<boolean>

        'hasRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<boolean>

        initialize(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: CallOverrides
        ): Promise<void>

        'initialize(address,address)'(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: CallOverrides
        ): Promise<void>

        isTrustedForwarder(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<boolean>

        'isTrustedForwarder(address)'(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<boolean>

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>

        'renounceRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>

        revokeAllPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<void>

        'revokeAllPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<void>

        revokePermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'revokePermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        revokePublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'revokePublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>

        'revokeRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<void>

        setEnsCache(
            ensCacheAddr: string,
            overrides?: CallOverrides
        ): Promise<void>

        'setEnsCache(address)'(
            ensCacheAddr: string,
            overrides?: CallOverrides
        ): Promise<void>

        setExpirationTime(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'setExpirationTime(string,address,uint8,uint256)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        setPermissions(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: CallOverrides
        ): Promise<void>

        'setPermissions(string,address[],tuple[])'(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: CallOverrides
        ): Promise<void>

        setPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        'setPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        setPermissionsMultipleStreans(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: CallOverrides
        ): Promise<void>

        'setPermissionsMultipleStreans(string[],address[][],tuple[][])'(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: CallOverrides
        ): Promise<void>

        setPublicPermission(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'setPublicPermission(string,uint256,uint256)'(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        streamIdToMetadata(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<string>

        'streamIdToMetadata(string)'(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<string>

        streamIdToPermissions(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        'streamIdToPermissions(string,bytes32)'(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<
            [boolean, boolean, BigNumber, BigNumber, boolean] & {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<boolean>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferAllPermissionsToUser(
            streamId: string,
            recipient: string,
            overrides?: CallOverrides
        ): Promise<void>

        'transferAllPermissionsToUser(string,address)'(
            streamId: string,
            recipient: string,
            overrides?: CallOverrides
        ): Promise<void>

        transferPermissionToUser(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        'transferPermissionToUser(string,address,uint8)'(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>

        trustedCreateStreams(
            streamIds: string[],
            metadatas: string[],
            overrides?: CallOverrides
        ): Promise<void>

        'trustedCreateStreams(string[],string[])'(
            streamIds: string[],
            metadatas: string[],
            overrides?: CallOverrides
        ): Promise<void>

        trustedSetPermissions(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: CallOverrides
        ): Promise<void>

        'trustedSetPermissions(string[],address[],tuple[])'(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: CallOverrides
        ): Promise<void>

        trustedSetPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        'trustedSetPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        trustedSetStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: CallOverrides
        ): Promise<void>

        'trustedSetStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: CallOverrides
        ): Promise<void>

        trustedSetStreamWithPermission(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        'trustedSetStreamWithPermission(string,string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: CallOverrides
        ): Promise<void>

        trustedSetStreams(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: CallOverrides
        ): Promise<void>

        'trustedSetStreams(string[],address[],string[],tuple[])'(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: CallOverrides
        ): Promise<void>

        updateStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: CallOverrides
        ): Promise<void>

        'updateStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: CallOverrides
        ): Promise<void>

        upgradeTo(
            newImplementation: string,
            overrides?: CallOverrides
        ): Promise<void>

        'upgradeTo(address)'(
            newImplementation: string,
            overrides?: CallOverrides
        ): Promise<void>

        upgradeToAndCall(
            newImplementation: string,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>

        'upgradeToAndCall(address,bytes)'(
            newImplementation: string,
            data: BytesLike,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        AdminChanged(
            previousAdmin: null,
            newAdmin: null
        ): TypedEventFilter<
            [string, string],
            { previousAdmin: string; newAdmin: string }
        >

        BeaconUpgraded(
            beacon: string | null
        ): TypedEventFilter<[string], { beacon: string }>

        PermissionUpdated(
            streamId: null,
            user: null,
            canEdit: null,
            canDelete: null,
            publishExpiration: null,
            subscribeExpiration: null,
            canGrant: null
        ): TypedEventFilter<
            [string, string, boolean, boolean, BigNumber, BigNumber, boolean],
            {
                streamId: string
                user: string
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumber
                subscribeExpiration: BigNumber
                canGrant: boolean
            }
        >

        RoleAdminChanged(
            role: BytesLike | null,
            previousAdminRole: BytesLike | null,
            newAdminRole: BytesLike | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; previousAdminRole: string; newAdminRole: string }
        >

        RoleGranted(
            role: BytesLike | null,
            account: string | null,
            sender: string | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
        >

        RoleRevoked(
            role: BytesLike | null,
            account: string | null,
            sender: string | null
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
        >

        StreamCreated(
            id: null,
            metadata: null
        ): TypedEventFilter<[string, string], { id: string; metadata: string }>

        StreamDeleted(id: null): TypedEventFilter<[string], { id: string }>

        StreamUpdated(
            id: null,
            metadata: null
        ): TypedEventFilter<[string, string], { id: string; metadata: string }>

        Upgraded(
            implementation: string | null
        ): TypedEventFilter<[string], { implementation: string }>
    }

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

        'DEFAULT_ADMIN_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>

        ENScreateStreamCallback(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'ENScreateStreamCallback(address,string,string,string)'(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        MAX_INT(overrides?: CallOverrides): Promise<BigNumber>

        'MAX_INT()'(overrides?: CallOverrides): Promise<BigNumber>

        TRUSTED_ROLE(overrides?: CallOverrides): Promise<BigNumber>

        'TRUSTED_ROLE()'(overrides?: CallOverrides): Promise<BigNumber>

        addressToString(
            _address: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'addressToString(address)'(
            _address: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        createStream(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'createStream(string,string)'(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        createStreamWithENS(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'createStreamWithENS(string,string,string)'(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        deleteStream(
            streamId: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'deleteStream(string)'(
            streamId: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        exists(streamId: string, overrides?: CallOverrides): Promise<BigNumber>

        'exists(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getAddressKey(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getAddressKey(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getDirectPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getDirectPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getRoleAdmin(bytes32)'(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getStreamMetadata(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getStreamMetadata(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getTrustedRole(overrides?: CallOverrides): Promise<BigNumber>

        'getTrustedRole()'(overrides?: CallOverrides): Promise<BigNumber>

        grantPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'grantPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        grantPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'grantPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'grantRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        hasDirectPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'hasDirectPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hasPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'hasPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hasPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'hasPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'hasRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        initialize(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'initialize(address,address)'(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        isTrustedForwarder(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'isTrustedForwarder(address)'(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'renounceRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        revokeAllPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'revokeAllPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        revokePermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'revokePermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        revokePublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'revokePublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'revokeRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setEnsCache(
            ensCacheAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'setEnsCache(address)'(
            ensCacheAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setExpirationTime(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'setExpirationTime(string,address,uint8,uint256)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setPermissions(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'setPermissions(string,address[],tuple[])'(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'setPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setPermissionsMultipleStreans(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'setPermissionsMultipleStreans(string[],address[][],tuple[][])'(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        setPublicPermission(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'setPublicPermission(string,uint256,uint256)'(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        streamIdToMetadata(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'streamIdToMetadata(string)'(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        streamIdToPermissions(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'streamIdToPermissions(string,bytes32)'(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        transferAllPermissionsToUser(
            streamId: string,
            recipient: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'transferAllPermissionsToUser(string,address)'(
            streamId: string,
            recipient: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        transferPermissionToUser(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'transferPermissionToUser(string,address,uint8)'(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        trustedCreateStreams(
            streamIds: string[],
            metadatas: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'trustedCreateStreams(string[],string[])'(
            streamIds: string[],
            metadatas: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        trustedSetPermissions(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'trustedSetPermissions(string[],address[],tuple[])'(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        trustedSetPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'trustedSetPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        trustedSetStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'trustedSetStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        trustedSetStreamWithPermission(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'trustedSetStreamWithPermission(string,string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        trustedSetStreams(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'trustedSetStreams(string[],address[],string[],tuple[])'(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        updateStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'updateStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        upgradeTo(
            newImplementation: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'upgradeTo(address)'(
            newImplementation: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        upgradeToAndCall(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>

        'upgradeToAndCall(address,bytes)'(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'DEFAULT_ADMIN_ROLE()'(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        ENScreateStreamCallback(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'ENScreateStreamCallback(address,string,string,string)'(
            ownerAddress: string,
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        MAX_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'MAX_INT()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        TRUSTED_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'TRUSTED_ROLE()'(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        addressToString(
            _address: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'addressToString(address)'(
            _address: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        createStream(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'createStream(string,string)'(
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        createStreamWithENS(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'createStreamWithENS(string,string,string)'(
            ensName: string,
            streamIdPath: string,
            metadataJsonString: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        deleteStream(
            streamId: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'deleteStream(string)'(
            streamId: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        exists(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'exists(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getAddressKey(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getAddressKey(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getDirectPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getDirectPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getRoleAdmin(bytes32)'(
            role: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getStreamMetadata(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getStreamMetadata(string)'(
            streamId: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getTrustedRole(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'getTrustedRole()'(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        grantPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'grantPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        grantPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'grantPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'grantRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        hasDirectPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'hasDirectPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hasPermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'hasPermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hasPublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'hasPublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'hasRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        initialize(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'initialize(address,address)'(
            ensCacheAddr: string,
            trustedForwarderAddress: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        isTrustedForwarder(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'isTrustedForwarder(address)'(
            forwarder: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'renounceRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        revokeAllPermissionsForUser(
            streamId: string,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'revokeAllPermissionsForUser(string,address)'(
            streamId: string,
            user: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        revokePermission(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'revokePermission(string,address,uint8)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        revokePublicPermission(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'revokePublicPermission(string,uint8)'(
            streamId: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'revokeRole(bytes32,address)'(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setEnsCache(
            ensCacheAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'setEnsCache(address)'(
            ensCacheAddr: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setExpirationTime(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'setExpirationTime(string,address,uint8,uint256)'(
            streamId: string,
            user: string,
            permissionType: BigNumberish,
            expirationTime: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setPermissions(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'setPermissions(string,address[],tuple[])'(
            streamId: string,
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'setPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setPermissionsMultipleStreans(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'setPermissionsMultipleStreans(string[],address[][],tuple[][])'(
            streamIds: string[],
            users: string[][],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[][],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        setPublicPermission(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'setPublicPermission(string,uint256,uint256)'(
            streamId: string,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        streamIdToMetadata(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'streamIdToMetadata(string)'(
            arg0: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        streamIdToPermissions(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'streamIdToPermissions(string,bytes32)'(
            arg0: string,
            arg1: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'supportsInterface(bytes4)'(
            interfaceId: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        transferAllPermissionsToUser(
            streamId: string,
            recipient: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'transferAllPermissionsToUser(string,address)'(
            streamId: string,
            recipient: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        transferPermissionToUser(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'transferPermissionToUser(string,address,uint8)'(
            streamId: string,
            recipient: string,
            permissionType: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        trustedCreateStreams(
            streamIds: string[],
            metadatas: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'trustedCreateStreams(string[],string[])'(
            streamIds: string[],
            metadatas: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        trustedSetPermissions(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'trustedSetPermissions(string[],address[],tuple[])'(
            streamids: string[],
            users: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        trustedSetPermissionsForUser(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'trustedSetPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        trustedSetStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'trustedSetStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        trustedSetStreamWithPermission(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'trustedSetStreamWithPermission(string,string,address,bool,bool,uint256,uint256,bool)'(
            streamId: string,
            metadata: string,
            user: string,
            canEdit: boolean,
            deletePerm: boolean,
            publishExpiration: BigNumberish,
            subscribeExpiration: BigNumberish,
            canGrant: boolean,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        trustedSetStreams(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'trustedSetStreams(string[],address[],string[],tuple[])'(
            streamids: string[],
            users: string[],
            metadatas: string[],
            permissions: {
                canEdit: boolean
                canDelete: boolean
                publishExpiration: BigNumberish
                subscribeExpiration: BigNumberish
                canGrant: boolean
            }[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        updateStreamMetadata(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'updateStreamMetadata(string,string)'(
            streamId: string,
            metadata: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        upgradeTo(
            newImplementation: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'upgradeTo(address)'(
            newImplementation: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        upgradeToAndCall(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>

        'upgradeToAndCall(address,bytes)'(
            newImplementation: string,
            data: BytesLike,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>
    }
}
